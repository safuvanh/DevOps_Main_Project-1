# TIP: 
# 1. To use 'ReplicaSet' instead of 'Pod' we need to add 'replicas', 'selectors' & 'template' under spec (RST)
# 2. The entire metadata of pod will go under 'template' (w/ labels added)
# 3. The 'apiVersion' of 'ReplicaSet' is 'apps/v1'

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-replicaset
spec:
  replicas: 1
  selector:
    matchLabels:
      name: my-pod1
  template:
    metadata:
      labels:
        name: my-pod1
    spec:
      containers:
      - name: container1
        image: httpd:latest
...

# COMMANDS:
# kubectl apply -f <file_name>.yaml  
# kubectl get replicaset               #(to check if replicaset is created)
# kubectl get pods                     #(to see if the pods are in running state)
# kubectl delete pods <pod-name>       #(try deleting the pod, it will get deleted & new pod will get created)
# modify the code with more replicas   #(you can create more replicas, if required)
# exit                                 #(to exit from the pod)

# To modify the code, first delete the replicaset
# kubectl delete replicaset <replica-set-name>
# Then edit the yaml file with desired replicas
# Then apply the yaml file
# kubectl apply -f <file_name>.yaml  

# NOTE:
# ReplicationController is an old form of K8s, hence we are not learning it practically
# Since 'ReplicaSet' cannot Rollback/ Update, hence we can use 'Deployment' object.
# In real-time, we use 'Deployment' only & not 'ReplicaSet'



